			=====================================================
					Pre-Defined Functions in dict
			=====================================================
=>We know that, On the object of dict, we performed
				1) Getting the Value of Value by passing Value of Key
				2) Updated / Modifed Old Value of  Value by Passing Value of Key
				3) Added (Key,Value) to dict object
=>To do Additional Operations on dict object along with the above Operations, we use the Pre-Defined Functions Present in dict object. They are
-----------------------------------------------------------------------------------------------------------------------------------------------------------
1. clear()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  dictobj.clear()
=>This Function is used for Removing all (Key,value) from dict Object.
--------------------------------
Examples
--------------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:5.6}
>>> print(d1,type(d1),id(d1))------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 5.6} <class 'dict'> 2162813491520
>>> len(d1)---------------------------------4
>>> d1.clear()
>>> print(d1,type(d1),id(d1))-----------{} <class 'dict'> 2162813491520
>>> len(d1)----------------------------------0
>>> print(d1.clear())----------------------None
-----------------------------------------------------------------------------------------------------------------------------------------------------------
2. pop()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax: dictobj.pop(key)
=>This Function is used for Removing (Key,Value) from dict object by passing Value of Key
=>If the Value of Key does not Exist then we get KeyError.
------------------------
Examples
------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:5.6}
>>> print(d1,type(d1),id(d1))-----------{10: 1.2, 20: 3.4, 30: 4.5, 40: 5.6} <class 'dict'> 2162813434112
>>> d1.pop(20)---------------------3.4
>>> print(d1,type(d1),id(d1))------{10: 1.2, 30: 4.5, 40: 5.6} <class 'dict'> 2162813434112
>>> d1.pop(10)--------------------1.2
>>> print(d1,type(d1),id(d1))-------------{30: 4.5, 40: 5.6} <class 'dict'> 2162813434112
>>> d1.pop(40)----------------------5.6
>>> print(d1,type(d1),id(d1))----------{30: 4.5} <class 'dict'> 2162813434112
>>> d1.pop(400)-------------------------KeyError: 400
>>> d1.pop(30)-------------------------4.5
>>> print(d1,type(d1),id(d1))-------------{} <class 'dict'> 2162813434112
>>> d1.pop(10)-------------------------------KeyError: 10
-------------------------
>>> {}.pop(10)--------------------------------KeyError: 10
>>> dict().pop(1)-----------------------------KeyError: 1
-----------------------------------------------------------------------------------------------------------------------------------------------------------
3. popitem()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   dictobj.popitem()
=>This Function is used for Removing Last (Key,Value) from dict object.
=>When we call this Function on empty dict object then we get KeyError.
-----------------------------
Examples
-----------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:5.6}
>>> print(d1,type(d1),id(d1))----------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 5.6} <class 'dict'> 2162813855168
>>> d1.popitem()-------------------------------(40, 5.6)
>>> print(d1,type(d1),id(d1))----------------{10: 1.2, 20: 3.4, 30: 4.5} <class 'dict'> 2162813855168
>>> d1.popitem()------------------------------(30, 4.5)
>>> print(d1,type(d1),id(d1))---------------{10: 1.2, 20: 3.4} <class 'dict'> 2162813855168
>>> d1.popitem()------------------------------(20, 3.4)
>>> print(d1,type(d1),id(d1))---------------{10: 1.2} <class 'dict'> 2162813855168
>>> d1.popitem()------------------------------(10, 1.2)
>>> print(d1,type(d1),id(d1))---------------{} <class 'dict'> 2162813855168
>>> d1.popitem()-------------------------------KeyError: 'popitem(): dictionary is empty'
>>> {}.popitem()--------------------------------KeyError: 'popitem(): dictionary is empty'
>>> dict().popitem()--------------------------KeyError: 'popitem(): dictionary is empty'
>>> {10:1.2,20:1.2,30:3.4}.popitem()-----------(30, 3.4)
-----------------------------------------------------------------------------------------------------------------------------------------------------------
4. copy()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  dictobj2=dictobj1.copy()
=>This Function is used for Copying gthe Content of DictObj1 into DictObj2 (Implements Shallow Copy).
-------------------------
Examples
-------------------------
>>> d1={10:1.2,20:3.4,30:4.5}
>>> print(d1,type(d1),id(d1))------------{10: 1.2, 20: 3.4, 30: 4.5} <class 'dict'> 2419347260800
>>>
>>> d2=d1.copy() # Shallow copy
>>> print(d2,type(d2),id(d2))------------{10: 1.2, 20: 3.4, 30: 4.5} <class 'dict'> 2419347355904
>>> d1[40]=2.3
>>> d2.popitem()-------------------------(30, 4.5)
>>> print(d1,type(d1),id(d1))-----------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'> 2419347260800
>>> print(d2,type(d2),id(d2))-----------{10: 1.2, 20: 3.4} <class 'dict'> 2419347355904
-----------------------------------------------------------------------------------------------------------------------------------------------------------
5. get()--Most Imp
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:      value=dictobj.get(key)
=>This Function is used for Obtaining Value of Value by Passing Value of Key.
=>If the Value of Key does not Exist in Dict Object then  we get None as Result
				OR
=>Syntax:	val=dictobj[Key]
=>This Syntax is used for Obtaining Value of Value by Passing Value of Key.
=>If the Value of Key does not Exist in Dict Object then  we get KeyError as Result
------------------------
Examples
------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1))----------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'>
>>> val=d1.get(10)
>>> print(val)---------------------------------1.2
>>> val=d1.get(30)
>>> print(val)---------------------------------4.5
>>> val=d1.get(100)
>>> print(val)-----------------------------None
>>> x=dict().get(10)
>>> print(x)--------------------------------None
>>> print({}.get(100))--------------------None
---------------------------
Examples
--------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1))-------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'>
>>> d1[10]----------------------------1.2
>>> val=d1[20]
>>> print(val)-------------------------3.4
>>> val=d1[30]
>>> print(val)--------------------------4.5
>>> val=d1[200]------------------------KeyError: 200
>>> {}[10]--------------------------------KeyError: 10
>>> dict()[2]----------------------------KeyError: 2
>>> {10:1.2,20:2.2,30:3.3}[10]------------------------1.2
>>> {10:1.2,20:2.2,30:3.3}.get(10)-------------------1.2
-----------------------------------------------------------------------------------------------------------------------------------------------------------
6. keys()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:     varname=dictobj.keys()
=>This Function is used for Obtaining Values of Key and Stored in LHS Var Name and whose type is <class, 'dict_keys'>
--------------------
Examples
--------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1))-----------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'>
>>>
>>> ks=d1.keys()
>>> print(ks,type(ks))------------dict_keys([10, 20, 30, 40]) <class 'dict_keys'>
>>> for k in ks:
...		print(k)
...
			10
			20
			30
			40
>>> lst=list(ks)
>>> print(lst,type(lst))-------------[10, 20, 30, 40] <class 'list'>
>>> for k in d1.keys():
...		print(k)
...
		10
		20
		30
		40
-----------------------------------------------------------------------------------------------------------------------------------------------------------
7. values()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:     varname=dictobj.values()
=>This Function is used for Obtaining Values of Value and Stored in LHS Var Name and whose type is <class, 'dict_values>
----------------------
Examples
----------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1))---------------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'>
>>> vs=d1.values()
>>> print(vs,type(vs))---------------------dict_values([1.2, 3.4, 4.5, 2.3]) <class 'dict_values'>
>>> for v in vs:
...		print(v)
...
		1.2
		3.4
		4.5
		2.3
>>> for v in d1.values():
...		print(v)
...
		1.2
		3.4
		4.5
		2.3
>>> tpl=tuple(vs)
>>> print(tpl,type(tpl))------------(1.2, 3.4, 4.5, 2.3) <class 'tuple'>
-----------------------------------------------------------------------------------------------------------------------------------------------------------
8. items()
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  varname=dictobj.items()
=>This Function is used for Obtaining  all (Key,Value) and Stored in LHS Var Name and whose type is <class, 'dict_items>
------------------------------
Examples
------------------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1))----------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'>
>>> kv=d1.items()
>>> print(kv,type(kv))-----------------dict_items([(10, 1.2), (20, 3.4), (30, 4.5), (40, 2.3)]) <class 'dict_items'>
>>> for x in kv:
...		print(x)
...
		(10, 1.2)
		(20, 3.4)
		(30, 4.5)
		(40, 2.3)
>>> for k,v in kv:
...		print(k,"--->",v)
...
		10 ---> 1.2
		20 ---> 3.4
		30 ---> 4.5
		40 ---> 2.3
>>> for kv in d1.items():
...		print(kv,type(kv))
...
		(10, 1.2) <class 'tuple'>
		(20, 3.4) <class 'tuple'>
		(30, 4.5) <class 'tuple'>
		(40, 2.3) <class 'tuple'>
>>> for k,v in d1.items():
...		print(k,"==>",v)
...
		10 ==> 1.2
		20 ==> 3.4
		30 ==> 4.5
		40 ==> 2.3
NOTE:
-----------
>>> x={}.keys()
>>> print(x,type(x))---------------dict_keys([]) <class 'dict_keys'>
>>> len(x)---------------------------0
>>> y=dict().values()
>>> print(y,type(y))--------------dict_values([]) <class 'dict_values'>
>>> len(y)--------------------------0
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Special Points
-----------------------
>>> d1={10:1.2,20:3.4,30:4.5,40:2.3}
>>> print(d1,type(d1))------------{10: 1.2, 20: 3.4, 30: 4.5, 40: 2.3} <class 'dict'>
>>> for x in d1:
...		print(x)
...
			10
			20
			30
			40
>>> for x in d1:
...		print(x,"--->",d1.get(x))
...
			10 ---> 1.2
			20 ---> 3.4
			30 ---> 4.5
			40 ---> 2.3
>>> for x in d1:
...		print(x,"--->",d1[x])
...
		10 ---> 1.2
		20 ---> 3.4
		30 ---> 4.5
		40 ---> 2.3
===================================================================================
