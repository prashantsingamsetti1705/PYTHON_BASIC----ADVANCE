			=====================================================
						Operations on str data
			=====================================================
=>On the object of str, we can perform Two Types of Operations. They are
			1. Indexing Operation
			2. Slicing Operation
****************************************************************************************************************************************************
1. Indexing Operation
****************************************************************************************************************************************************
=>Syntax:    strobj[ Index ]
=>The process of Obtaining Single Value from given str object by passing Value of Index.
=>Here Index can be either +Ve or -Ve
=>If we enter Valid Index then PVM gives Corresponding Indexed Value
=>If we enter InValid Index then PVM gives IndexError.
----------------------
Examples
----------------------
>>> s="PYTHON"
>>> s[0]------------------------'P'
>>> s[1]------------------------'Y'
>>> s[3]------------------------'H'
>>> s[2]------------------------'T'
>>> s[4]------------------------'O'
>>> s[5]------------------------'N'
>>> s[-6]-----------------------'P'
>>> s[-5]-----------------------'Y'
>>> s[-3]-----------------------'H'
>>> s[-2]-----------------------'O'
>>> s[-4]-----------------------'T'
>>> s[-1]-----------------------'N'
----------------
>>> s="PYTHON"
>>> print(s)-----------------------------PYTHON
>>> s[10]--------------------------------IndexError: string index out of range
>>> s[-8]---------------------------------IndexError: string index out of range
--------------------------
Most Imp
--------------------------
>>> s="PYTHON"
>>> len(s)---------------------6
>>> s[0]------------------------'P'
>>> s[len(s)-1]---------------'N'
>>> s[-1]-----------------------'N'
>>> s[-len(s)]-----------------'P'
-------------------------------------------
>>> "HYDERABAD"[0]---------------'H'
>>> "HYDERABAD"[-1]--------------'D'
>>>
>>> "HYDERABAD"[-len("HYDERABAD")]----------'H'
>>> "HYDERABAD"[len("HYDERABAD")-1]---------'D'
>>> "PYTHON PROG"[6]----------------------------------' '
>>> "PYTHON PROG"[5]---------------------------------'N'
>>> "PYTHON PROG"[7]---------------------------------'P'
>>> "PYTHON"[True]-------------------------------------'Y'
>>> "PYTHON"[False]------------------------------------'P'
>>> "PYTHON"[0b0011]----------------------------------'H'
>>> "PYTHON"[0xF]---------------------------------------IndexError: string index out of range
****************************************************************************************************************************************************
2. Slicing Operation
****************************************************************************************************************************************************
=>The Process of obtaining range of values/chars OR Sub String from main string is called Slicing.
=>To Perform Slicing Operation, we have 5 Syntaxes
-------------------------------------------------------------------
Syntax-1: strobj[BEGIN:END]
--------------------------------------------------------------------
=>This Syntax Obtains  range of values/chars OR Sub String from main string from BEGIN Index to END-1 Index 
    provided BEGIN < END otherwise we get Space OR ' ' as Result.
-------------------------
Examples: if  +VE BEGIN : +VE END  then BEGIN<END is Considered
-------------------------
>>> s="PYTHON"
>>> print(s,type(s))-----------------------PYTHON <class 'str'>
>>> s[0:4]-----------------------------------'PYTH'
>>> s[4:2]-----------------------------------' '
>>> s[2:5]-----------------------------------'THO'
>>> s[1:5]-----------------------------------'YTHO'
>>> s[2:4]-----------------------------------'TH'
>>> s[0:3]-----------------------------------'PYT'
>>> s[3:5]-----------------------------------'HO'
>>> s[2:6]-----------------------------------'THON'
>>> s[3:5]-----------------------------------'HO'
>>> s[4:6]-----------------------------------'ON'
>>> s[2:3]-----------------------------------'T'
>>> s[1:3]------------------------------------'YT'
>>> s[0:2]------------------------------------'PY'
>>> s[4:1]------------------------------------''
-----------------------------------------------------------------
Examples: if  -VE BEGIN : -VE END  then BEGIN<END is Considered
-----------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))------------------------PYTHON <class 'str'>
>>> s[-6:-4]-----------------------------------'PY'
>>> s[-5:-3]-----------------------------------'YT'
>>> s[-6:-1]-----------------------------------'PYTHO'
>>> s[-3:-2]-----------------------------------'H'
>>> s[-1:-3]-----------------------------------''
>>> s[-5:-1]-----------------------------------'YTHO'
>>> s[-4:-2]-----------------------------------'TH'
>>> s[-2:-1]-----------------------------------'O'
>>> s[-5:-4]-----------------------------------'Y'
>>> s[-1:-5]-----------------------------------''
-----------------------------------------------------------------------
Examples:  if +VE BEGIN : -VE END   then BEGIN<END is Ignored
----------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-----------------------PYTHON <class 'str'>
>>> s[0:-3]-----------------------------------'PYT'
>>> s[1:-2]-----------------------------------'YTH'
>>> s[2:-1]-----------------------------------'THO'
>>> s[1:-1]----------------------------------'YTHO'
>>> s[2:-2]----------------------------------'TH'
>>> s[3:-5]----------------------------------' '
>>> s[4:-5]----------------------------------' '
>>> s[2:-3]----------------------------------'T'
>>> s[2:-4]----------------------------------''
------------------------------------------------------------------
Examples:  if -VE BEGIN : +VE END   then BEGIN<END is Ignored
----------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))---------------------PYTHON <class 'str'>
>>> s[-6:4]---------------------------------'PYTH'
>>> s[-5:6]---------------------------------'YTHON'
>>> s[-6:6]---------------------------------'PYTHON'
>>> s[-5:4]---------------------------------'YTH'
>>> s[-3:6]---------------------------------'HON'
>>> s[-6:3]---------------------------------'PYT'
>>> s[-6:2]---------------------------------'PY'
>>> s[-4:3]---------------------------------'T'
>>> s[-4:1]---------------------------------''
---------------------------------------------------------------------------
Most Special Points
---------------------------------------------------------------------------
>>> s="PYTHON"
>>> print(s,type(s))------------------PYTHON <class 'str'>
>>> s[3:100]---------------------------'HON'
>>> s[-100:-4]-------------------------'PY'
>>> s[0:1000]--------------------------'PYTHON'
>>> s[-1000:-1]------------------------'PYTHO'
>>> s[-600:6]---------------------------'PYTHON'
>>> s[-600:600]------------------------'PYTHON'
>>> s[-600:-5]---------------------------'P'
>>> s[-600:-6]---------------------------''
>>> s[-999:4]----------------------------'PYTH'
>>> s[-1:1000]--------------------------'N'
>>> s[4:-1000]--------------------------''
>>> s[-2:100]----------------------------'ON'
>>> s[1000:-1000]---------------------' '
>>> s[-1000:1000]---------------------'PYTHON'
---------------------------------------------------------------------------
Syntax-2:    strobj[Begin: ]
---------------------------------------------------------------------------
=>In this Syntax, we are specifying BEGIN Index and Not specifying END Index.
=>If we are not Specifying END Index then PVM Takes END Index as len(strobj) 
					OR
=>If we are not Specifying END Index then PVM Takes Range of Values from BEGIN Index to Last Character.
---------------------------------
Examples
---------------------------------
>>> s="PYTHON"
>>> print(s,type(s))-------------------PYTHON <class 'str'>
>>> s[3:]---------------------------------'HON'
>>> s[2:]---------------------------------'THON'
>>> s[0:]---------------------------------'PYTHON'
>>> s[4:]---------------------------------'ON'
>>> s[5:]---------------------------------'N'
>>> s[1:]---------------------------------'YTHON'
>>> s[100:]------------------------------''
-------------------------
>>> s="PYTHON"
>>> print(s,type(s))---------------------------PYTHON <class 'str'>
>>> s[-6:]----------------------------------------'PYTHON'
>>> s[-4:]----------------------------------------'THON'
>>> s[-5:]----------------------------------------'YTHON'
>>> s[3:]-----------------------------------------'HON'
>>> s[-1:]----------------------------------------'N'
>>> s[-2:]----------------------------------------'ON'
>>> s[-1000:]-----------------------------------'PYTHON'
***************************************************************************************************************************************************
Syntax-3:   strobj[ : END ]
***************************************************************************************************************************************************
=>In this Syntax, we are specifying END Index and Not Specified BEGIN Index.
=>If we are not Specify BEGIN Index then PVM Takes 0th Index as BEGIN Index.
				OR
=>If we are not Specify BEGIN Index then PVM Takes range of chars from First Char to END-1 Index
------------------------------
Examples
------------------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[:4]----------------------'PYTH'
>>> s[:6]----------------------'PYTHON'
>>> s[:2]----------------------'PY'
>>> s[:3]----------------------'PYT'
>>> s[:5]----------------------'PYTHO'
>>> s[:50]---------------------'PYTHON'
----------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[:-4]---------------------'PY'
>>> s[:-3]---------------------'PYT'
>>> s[:-1]---------------------'PYTHO'
>>> s[:-5]---------------------'P'
>>> s[:-6]---------------------''
>>> s[:-100]------------------''
***************************************************************************************************************************************************
Syntax-4:   strobj[ : ]
***************************************************************************************************************************************************
=>In this Syntax we are not specifying BEGIN  and END Indices
=>This Syntax generates the range of chars from First Char to Last Char ( gives Complete strobj data)
---------------------------
Examples
---------------------------
>>> s="PYTHON"
>>> print(s)----------------------PYTHON
>>> s[:]---------------------------'PYTHON'
>>> s="PYTHON PROG"
>>> s[:]---------------------------'PYTHON PROG'
-----------------------
NOTE
-----------------------
=>In all the above Syntaxes, we are getting the sequence of chars from strobj in FORWARD Direction with Default 
   Step +1.
***************************************************************************************************************************************************
Syntax-5: strobj[BEGIN:END:STEP]
***************************************************************************************************************************************************
RULE-1: Here BEGIN,END, STEP Values can be either +VE or -VE OR BOTH
-----------
RULE-2: If the Value of STEP is +VE then PVM obtains of range of chars from BEGIN to END-1 Index in FORWARD ----------- Direction  provided BEGIN<END otherwise we get Space OR ' ' as Result

------------
RULE-3: If the Value of STEP is -VE then PVM Obtains range of chars from BEGIN to END+1 Index in BACKWARD 
------------Direction provided BEGIN> END otherwise we get Space OR ' ' as Result

-------------
RULE-4:   When we Extarct the Data in Forward Direction and If we specify the end Index as 0 then we get space OR ' ' ------------- as Result

------------
RULE-5    When we Extarct the Data in Backward Direction and If we specify the end Index as -1 then we get space OR ------------- ' ' as Result

***************************************************************************************************************************************************
RULE-2: Examples
--------------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------PYTHON
>>> s[0:6]-----------------------------'PYTHON'
>>> s[0:6:1]---------------------------'PYTHON'
>>> s[1:6:1]---------------------------'YTHON'
>>> s[1:6]-----------------------------'YTHON'
>>> s[:]---------------------------------'PYTHON'
>>> s[::]--------------------------------'PYTHON'
>>> s[::2]------------------------------'PTO'
>>> s[2:6:2]----------------------------'TO'
>>> s[1:5:3]---------------------------'YO'
>>> s[0:6:4]---------------------------'PO'
----------------------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------PYTHON
>>> s[-6:-1:1]------------------------'PYTHO'
>>> s[-5:-1:2]------------------------'YH'
>>> s[-3:-1:2]------------------------'H'
>>> s[-2:-6:2]------------------------''
>>> s[-6:-3:2]-----------------------'PT'
>>> s[-5:-1:3]----------------------'YO'
----------------------------------------------------------
>>> s="PYTHON"
>>> print(s)----------------------PYTHON
>>> s[-6:6:2]--------------------'PTO'
>>> s[-5:6:2]--------------------'YHN'
>>> s[-6:5:3]--------------------'PH'
>>> s[-4:6:4]--------------------'T'
>>> s[-100:6:2]-----------------'PTO'
>>> s[-100:100:3]-------------'PH'
>>> s[-6:100:4]---------------'PO'
----------------------------------------------------------
>>> s="PYTHON"
>>> print(s)------------------------PYTHON
>>> s[0:-1:2]-----------------------'PTO'
>>> s[0:-2:3]-----------------------'PH'
>>> s[0:-2:]-------------------------'PYTH'
>>> s[2:-2:2]-----------------------'T'
>>> s[1:-100:3]--------------------' '
----------------------------------------------------------
>>> s="PYTHON"
>>> print(s)------------------------PYTHON
>>> s[:6:2]-------------------------'PTO'
>>> s[2::3]-------------------------'TN'
>>> s[:3:]--------------------------'PYT'
>>> s[-1000::3]------------------'PH'
------------------------------------------------------------
RULE-3: Examples
------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)-------------------PYTHON
>>> s[::]-----------------------'PYTHON'
>>> s[::1]---------------------'PYTHON'
>>> s[::-1]---------------------'NOHTYP'----Reversing a String Data . Here [::-1] is called Extended Slicing.
>>> s="PYTHON"
>>> print(s)---------------------PYTHON
>>> s[5:1:-1]--------------------'NOHT'
>>> s[1:5:-1]--------------------''
>>> s[5:0:-2]--------------------'NHY'
>>> s[4:0:-1]--------------------'OHTY'
>>> s[::-2]-----------------------'NHY'
>>> s[4:0:-3]-------------------'OY'
>>> s[5:1:-3]-------------------'NT'
>>> s[3:0:-2]-------------------'HY'
>>> "HYDERABAD"[::-2]-------'DBRDH'
------------------------------------------------------------
>>> s="PYTHON"
>>> print(s)-------------------------PYTHON
>>> s[-1:-6:-1]---------------------'NOHTY'
>>> s[-2:-5:-2]---------------------'OT'
>>> s[-1:-6:-3]---------------------'NT'
>>> s[-2:-7:-2]---------------------'OTP'
>>> s[::-3]--------------------------'NT'
>>> s[-2:-10:-4]-------------------'OP'
>>> s[-10:-1:-1]-------------------''
-------------------------------------------------
>>> s="PYTHON"
>>> print(s)------------------PYTHON
>>> s[2::-1]------------------'TYP'
>>> s[2::1]-------------------'THON'
>>> s[3::-2]-------------------'HY'
>>> s[3::-1]-------------------'HTYP'
-------------------------------------------------
>>> s="PYTHON"
>>> print(s)---------------------------PYTHON
>>> s[-4::-1]--------------------------'TYP'
>>> s[-4::1]---------------------------'THON'
-----------------
>>> s[:3:-1]----------------------------'NO'
>>> s[:2:-2]----------------------------'NH'
>>> s[:1:-3]----------------------------'NT'
>>> s[:-3:-1]---------------------------'NO'
>>> s[:-4:-2]---------------------------'NH'
>>> s[:-7:-3]---------------------------'NT'
---------------------------------------------------------
RULE-4--Examples
---------------------------------------------------------
>>> s="PYTHON"
>>> print(s)--------------PYTHON
>>> s[:0:]------------------''
>>> s[2:0:]----------------''
---------------------------------------------------------
RULE-5--Examples
---------------------------------------------------------
>>> s="PYTHON"
>>> print(s)-----------------------PYTHON
>>> s[:-1:-1]----------------------''
>>> s[2:-1:-2]---------------------''
>>> s[4:-1:-3]--------------------''
-------------------------------------------------
String palindrome
-------------------------------------------------
>>> "MADAM"=="MADAM"[::-1]
True
>>> "PYTHON"=="PYTHON"[::-1]
False
>>> "RACECAR"=="RACECAR"[::-1]
True
>>> "MOM"=="MOM"[::-1]
True
>>> "LIRIL"=="LIRIL"[::-1]
True
>>> "MALAYALAM"[::]=="MALAYALAM"[::-1]
True
>>> "OYO"=="OYO"[::-1]
True
>>> "PYTHON"[::2][::-1]=="PYTHON"[-2::-2]
True
>>>
==============================================================================