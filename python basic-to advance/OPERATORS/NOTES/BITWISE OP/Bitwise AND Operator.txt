			==================================================
						Bitwise AND Operator (&)
			==================================================
=>Syntax:		Value1 & Value2
=>The Functionality of Bitwise AND Operator (&) is described with following truth table.
			----------------------------------------------------------------
				Value1	Value2	    Value1 & Value2
			----------------------------------------------------------------
				0		1				0
				1		0				0
				0		0				0
				1		1				1
			----------------------------------------------------------------
-----------------------
Example-1
------------------------
>>> 0 & 1----------------0
>>> 1 & 0----------------0
>>> 0 & 0----------------0
>>> 1 & 1----------------1
-----------------------------
Example-2
-----------------------------
>>>a=10-------------  0000 1010
>>>b=4--------------- 0000 0100
			-------------------------
>>>c=a&b----------  0000  0000
>>>print(c)---------0
>>> a=3
>>> b=4
>>> c=a&b
>>> print(c)--------------0
-------------------------------------------------
>>>"Apple" & "mango"-------------TypeError: unsupported operand type(s) for &: 'str' and 'str'
>>> print(5&4)-------------------4
>>> print(4&5)-------------------4
---------------------------------------------------------
Example-3
---------------------------------------------------------
>>> s1={10,20,30}
>>> s2={15,20,35}
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))--------------{20} <class 'set'>
------------------OR------------------------		
>>> s1={10,20,30}
>>> s2={15,20,35}
>>> s3=s1&s2  # Bitwise & (AND) Operator
>>> print(s3,type(s3))---------{20} <class 'set'>
-------------------------------------
>>> s1={"Apple","mango","Kiwi"}
>>> s2={"Guava","Orango","mango"}
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))---------------{'mango'} <class 'set'>
-----------------------------------
>>> s1={"Apple","mango","Kiwi"}
>>> s2={"Guava","Orango","mango"}
>>> s3=s1&s2  # Bitwise & (AND) Operator
>>> print(s3,type(s3))-------------------{'mango'} <class 'set'>
------------------------------------------
>>> s1={1.2,2.3,4.5}
>>> s2={2.3,3.3,4.4}
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))---------{2.3} <class 'set'>
>>> s1={1.2,2.3,4.5}
>>> s2={2.3,3.3,4.4}
>>> s3=s1&s2  # Bitwise & (AND) Operator
>>> print(s3,type(s3))-----------{2.3} <class 'set'>
>>> 2.5&3.4-------------------------TypeError: unsupported operand type(s) for &: 'float' and 'float'
-----------------------------------------
>>> lst=[10,20,30,40]
>>> tpl=(10,15,25,56)
>>> lst&tpl---------------TypeError: unsupported operand type(s) for &: 'list' and 'tuple'
-------------------------------------------------------------------------------------------------------------------------------------------------------------
